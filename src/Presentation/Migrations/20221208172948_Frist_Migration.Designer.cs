// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Presentation.Migrations
{
    [DbContext(typeof(AspingDbContext))]
    [Migration("20221208172948_Frist_Migration")]
    partial class Frist_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infrastructure.Model.Locals.Concelho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DistritoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistritoId");

                    b.ToTable("Concelho");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Distrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Distrito");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Freguesia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConcelhoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("codSF")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConcelhoId");

                    b.ToTable("Freguesia");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Predio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FreguesiaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreguesiaId");

                    b.ToTable("Predio");
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Death")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Albert Einstein"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Abraham Lincoln"
                        });
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2022, 12, 8, 17, 29, 47, 834, DateTimeKind.Local).AddTicks(8181),
                            Value = "America will never be destroyed from the outside",
                            When = new DateTime(1838, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2022, 12, 8, 17, 29, 47, 842, DateTimeKind.Local).AddTicks(1872),
                            Value = "Two things are infinite: the universe and human stupidity; and I'm not sure about the universe."
                        });
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.QuoteTag", b =>
                {
                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("QuoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("QuoteTags");

                    b.HasData(
                        new
                        {
                            QuoteId = 1,
                            TagId = 1
                        },
                        new
                        {
                            QuoteId = 1,
                            TagId = 5
                        },
                        new
                        {
                            QuoteId = 2,
                            TagId = 1
                        },
                        new
                        {
                            QuoteId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "General",
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Science",
                            Name = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Business",
                            Name = "Business"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Life",
                            Name = "Life"
                        },
                        new
                        {
                            Id = 5,
                            Description = "History",
                            Name = "History"
                        });
                });

            modelBuilder.Entity("QuoteTag", b =>
                {
                    b.Property<int>("QuotesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("QuotesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuoteTag");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Concelho", b =>
                {
                    b.HasOne("Infrastructure.Model.Locals.Distrito", "Distrito")
                        .WithMany("Concelhos")
                        .HasForeignKey("DistritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distrito");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Freguesia", b =>
                {
                    b.HasOne("Infrastructure.Model.Locals.Concelho", "Concelho")
                        .WithMany("Freguesias")
                        .HasForeignKey("ConcelhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concelho");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Predio", b =>
                {
                    b.HasOne("Infrastructure.Model.Locals.Freguesia", "Freguesia")
                        .WithMany("Predios")
                        .HasForeignKey("FreguesiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freguesia");
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Quote", b =>
                {
                    b.HasOne("Infrastructure.Model.Quotes.Author", "Author")
                        .WithMany("Quotes")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.QuoteTag", b =>
                {
                    b.HasOne("Infrastructure.Model.Quotes.Quote", "Quote")
                        .WithMany("QuoteTags")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Model.Quotes.Tag", "Tag")
                        .WithMany("QuoteTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("QuoteTag", b =>
                {
                    b.HasOne("Infrastructure.Model.Quotes.Quote", null)
                        .WithMany()
                        .HasForeignKey("QuotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Model.Quotes.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Concelho", b =>
                {
                    b.Navigation("Freguesias");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Distrito", b =>
                {
                    b.Navigation("Concelhos");
                });

            modelBuilder.Entity("Infrastructure.Model.Locals.Freguesia", b =>
                {
                    b.Navigation("Predios");
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Author", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Quote", b =>
                {
                    b.Navigation("QuoteTags");
                });

            modelBuilder.Entity("Infrastructure.Model.Quotes.Tag", b =>
                {
                    b.Navigation("QuoteTags");
                });
#pragma warning restore 612, 618
        }
    }
}
